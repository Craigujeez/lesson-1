{"ast":null,"code":"import _toConsumableArray from \"/Users/nnamdiujah/Documents/React/lesson-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/nnamdiujah/Documents/React/lesson-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar initialState = {\n  hidden: true,\n  cartItems: [],\n  totalPrice: 0\n};\n\nvar addToCart = function addToCart(state, action) {\n  var existingCartItem = state.cartItems.find(function (cartItem) {\n    return cartItem.id === action.payload.id;\n  }); // checking to see if item already exists in cart\n\n  if (existingCartItem) {\n    return state.cartItems.map(function (cartItem) {\n      return cartItem.id === action.payload.id ? _objectSpread({}, cartItem, {\n        quantity: cartItem.quantity + 1\n      }) : cartItem;\n    }); // if it exists we increase the quantity of the item instead of creating duplicates\n  }\n\n  return [].concat(_toConsumableArray(state.cartItems), [_objectSpread({}, action.payload, {\n    quantity: 1\n  })]); // if the item doesnt exist we add it to the cart with the added property of quantity\n};\n\nvar clearFromCart = function clearFromCart(state, action) {\n  var newCart = state.cartItems.filter(function (item) {\n    return item.id !== action.payload.id;\n  });\n  return newCart;\n};\n\nvar RemoveItemFromCart = function RemoveItemFromCart(state, action) {\n  if (action.payload.quantity === 1) {\n    return clearFromCart(state, action);\n  }\n\n  return state.cartItems.map(function (cartItem) {\n    return cartItem.id === action.payload.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity - 1\n    }) : cartItem;\n  });\n};\n\nvar TotalPrice = function TotalPrice(state) {\n  // const newState = state.cartItems.slice(0);\n  var total = state.cartItems.reduce(function (accumalatedQuantity, cartItem) {\n    return accumalatedQuantity + cartItem.quantity;\n  }, 0); // console.log(total, \"total\");\n  // const add = (a, b) => a + b \n  // const sum = total.reduce(add,0);\n  // return sum;\n};\n\nvar cart = function cart() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_TO_CART\":\n      return _objectSpread({}, state, {\n        cartItems: addToCart(state, action),\n        totalPrice: TotalPrice(state)\n      });\n\n    case \"TOGGLE_CART_HIDDEN\":\n      return _objectSpread({}, state, {\n        hidden: !state.hidden\n      });\n\n    case \"CLEAR_ITEM_FROM_CART\":\n      return _objectSpread({}, state, {\n        cartItems: clearFromCart(state, action),\n        totalPrice: TotalPrice(state)\n      });\n\n    case \"REMOVE_ITEM\":\n      return _objectSpread({}, state, {\n        cartItems: RemoveItemFromCart(state, action),\n        totalPrice: TotalPrice(state)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cart;","map":{"version":3,"sources":["/Users/nnamdiujah/Documents/React/lesson-1/src/reducers/cart.js"],"names":["initialState","hidden","cartItems","totalPrice","addToCart","state","action","existingCartItem","find","cartItem","id","payload","map","quantity","clearFromCart","newCart","filter","item","RemoveItemFromCart","TotalPrice","total","reduce","accumalatedQuantity","cart","type"],"mappings":"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","sourcesContent":["const initialState={\n    hidden: true,\n    cartItems: [],\n    totalPrice: 0,\n}\n\nconst addToCart = (state,action) => {\n    const existingCartItem = state.cartItems.find(cartItem => cartItem.id === action.payload.id) // checking to see if item already exists in cart\n\n    if(existingCartItem){\n        return state.cartItems.map(cartItem => cartItem.id === action.payload.id ? {...cartItem, quantity: cartItem.quantity + 1} : cartItem)  // if it exists we increase the quantity of the item instead of creating duplicates\n    }\n\n    return [...state.cartItems, {...action.payload, quantity: 1}]     // if the item doesnt exist we add it to the cart with the added property of quantity\n}\n\nconst clearFromCart = (state,action) => {\n    const newCart = state.cartItems.filter(item => item.id !== action.payload.id);\n    return newCart;\n};\n\nconst RemoveItemFromCart = (state,action) => {\n    if(action.payload.quantity === 1){\n        return clearFromCart(state,action)\n    }\n    return state.cartItems.map(cartItem => cartItem.id === action.payload.id ? {...cartItem, quantity: cartItem.quantity - 1} : cartItem)\n};\n\nconst TotalPrice = (state) => {\n    // const newState = state.cartItems.slice(0);\n    let total = state.cartItems.reduce( (accumalatedQuantity, cartItem) => accumalatedQuantity + cartItem.quantity, 0\n      )\n\n    // console.log(total, \"total\");\n    // const add = (a, b) => a + b \n\n    // const sum = total.reduce(add,0);\n    // return sum;\n}\n\nconst cart = (state=initialState, action) => {\n    switch (action.type) {\n        case \"ADD_TO_CART\":\n            return {\n              ...state,\n              cartItems: addToCart(state,action),\n              totalPrice: TotalPrice(state),\n            };\n        case \"TOGGLE_CART_HIDDEN\":\n            return {\n                ...state,\n                hidden: !state.hidden,\n            };\n        case \"CLEAR_ITEM_FROM_CART\":\n            return {\n                ...state,\n                cartItems: clearFromCart(state,action),\n                totalPrice: TotalPrice(state),\n            };\n        case \"REMOVE_ITEM\":\n            return {\n                ...state,\n                cartItems: RemoveItemFromCart(state,action),\n                totalPrice: TotalPrice(state),\n            };\n            \n        default:\n            return state;\n    }\n}\n\nexport default cart;"]},"metadata":{},"sourceType":"module"}