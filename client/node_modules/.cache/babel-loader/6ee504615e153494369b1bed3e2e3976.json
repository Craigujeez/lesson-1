{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nnamdiujah/Documents/React/lesson-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nnamdiujah/Documents/React/lesson-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/nnamdiujah/Documents/React/lesson-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../firebase/firebase.utils\";\nvar initialState = {\n  user: null,\n  collection: []\n};\n\nvar Shop = function Shop() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"LOAD_USER\":\n      return _objectSpread({}, state, {\n        user: action.user\n      });\n\n    case \"UPDATE_COLLECTION\":\n      return _objectSpread({}, state, {\n        collection: action.result\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default Shop;\nexport var updateCollection = function updateCollection() {\n  return function (dispatch) {\n    try {\n      var collectionRef = firestore.collection(\"collections\");\n      return collectionRef.onSnapshot( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(snapshot) {\n          var collectionsMap;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n                  dispatch({\n                    type: \"UPDATE_COLLECTION\",\n                    result: collectionsMap\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      alert(err);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/nnamdiujah/Documents/React/lesson-1/src/reducers/Shop.js"],"names":["firestore","convertCollectionsSnapshotToMap","initialState","user","collection","Shop","state","action","type","result","updateCollection","dispatch","collectionRef","onSnapshot","snapshot","collectionsMap","err","alert"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,+BAAnB,QAAyD,4BAAzD;AAEA,IAAMC,YAAY,GAAC;AACfC,EAAAA,IAAI,EAAE,IADS;AAEfC,EAAAA,UAAU,EAAE;AAFG,CAAnB;;AAKA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAgC;AAAA,MAA/BC,KAA+B,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACzC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AAEI,+BACKF,KADL;AAEEH,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFf;;AAIF,SAAK,mBAAL;AAEE,+BACKG,KADL;AAEEF,QAAAA,UAAU,EAAEG,MAAM,CAACE;AAFrB;;AAKJ;AACI,aAAOH,KAAP;AAfR;AAiBH,CAlBD;;AAoBA,eAAeD,IAAf;AAEA,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,SAAO,UAACC,QAAD,EAAc;AACnB,QAAI;AACF,UAAMC,aAAa,GAAGZ,SAAS,CAACI,UAAV,CAAqB,aAArB,CAAtB;AAEA,aAAOQ,aAAa,CAACC,UAAd;AAAA,4EAA0B,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvBC,kBAAAA,cAFuB,GAENd,+BAA+B,CAACa,QAAD,CAFzB;AAG7BH,kBAAAA,QAAQ,CAAC;AAACH,oBAAAA,IAAI,EAAE,mBAAP;AAA4BC,oBAAAA,MAAM,EAAEM;AAApC,mBAAD,CAAR;;AAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA1B;;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD,KATD,CASE,OAAMC,GAAN,EAAU;AACVC,MAAAA,KAAK,CAACD,GAAD,CAAL;AACD;AACF,GAbD;AAcD,CAfM","sourcesContent":["import {firestore, convertCollectionsSnapshotToMap} from \"../firebase/firebase.utils\";\n\nconst initialState={\n    user: null,\n    collection: [],\n}\n\nconst Shop = (state=initialState, action) => {\n    switch (action.type) {\n        case \"LOAD_USER\":\n            \n            return {\n              ...state,\n              user: action.user,\n            };\n          case \"UPDATE_COLLECTION\":\n\n            return {\n              ...state,\n              collection: action.result\n            };\n    \n        default:\n            return state;\n    }\n}\n\nexport default Shop;\n\nexport const updateCollection = () => {\n  return (dispatch) => {\n    try {\n      const collectionRef = firestore.collection(\"collections\");\n  \n      return collectionRef.onSnapshot( async snapshot => {\n        \n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n          dispatch({type: \"UPDATE_COLLECTION\", result: collectionsMap});\n      })\n\n    } catch(err){\n      alert(err)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}